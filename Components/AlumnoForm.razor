@using Microsoft.AspNetCore.Components.Forms;

<h1>@Mode Alumno</h1>

<hr />
@if (Alumno is not null)
{
    <EditForm Model="Alumno"
              OnInvalidSubmit="(async () => await HandleSubmitAsync(false))"
              OnValidSubmit="(async () => await HandleSubmitAsync(true))">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <FluentCard>
            <FluentBodyContent>
                <FluentStack Orientation="Orientation.Vertical">
                    <h2>Identificacion</h2>
                    <div style="margin-right: 10px;">
                        <FluentTextField Name="Nombre" @bind-Value="Alumno.Nombre" Label="Nombre del Alumno"  />
                        <FluentValidationMessage For="@(() => Alumno.Nombre)" />
                        <ConcurrencyField Model="Alumno"
                                          DbModel="DbAlumno"
                                          Property="obj => obj?.Nombre" />
                    </div>
                    <div style="margin-right: 10px;">
                        <FluentTextField Name="NombrePersona" @bind-Value="Alumno.ApellidoPaterno" Label="Apellidos"  />
                        <FluentValidationMessage For="@(() => Alumno.ApellidoPaterno)" />
                        <ConcurrencyField Model="Alumno"
                                          DbModel="DbAlumno"
                                          Property="obj => obj?.ApellidoPaterno" />
                        <FluentTextField Name="Apellido:" @bind-Value="Alumno.ApellidoMaterno" Label=""/>
                        <FluentValidationMessage For="@(() => Alumno.ApellidoMaterno)" />
                        <ConcurrencyField Model="Alumno"
                                          DbModel="DbAlumno"
                                          Property="obj => obj?.ApellidoMaterno" />
                    </div>
                    <br />
                    <h2>Ingreso</h2>
                    <div style="margin-right: 10px;">
                        <label>
                            Fecha de ingreso:
                            <InputDate @bind-Value="Alumno.FechaIngreso"/>
                            <ConcurrencyField Model="Alumno"
                                              DbModel="DbAlumno"
                                              Property="obj => obj?.FechaIngreso" />
                        </label>
                    </div>
                    <br />
                    <h2>Aparato o Implante</h2>
                    <div style="margin-right: 10px;">
                        <FluentCheckbox Name="Aparato" @bind-Value="Alumno.Aparato" Label="Aparato" />
                        <FluentValidationMessage For="@(() => Alumno.Aparato)" />
                        <br />
                        <label>
                            Fecha de aparato:
                            <InputDate @bind-Value="Alumno.FechaAparato" />
                            <ConcurrencyField Model="Alumno"
                                              DbModel="DbAlumno"
                                              Property="obj => obj?.FechaAparato" />
                        </label>
                        <br />
                        <label>
                            Fecha de Programacion:
                            <InputDate @bind-Value="Alumno.FechaProgramacion" />
                            <ConcurrencyField Model="Alumno"
                                              DbModel="DbAlumno"
                                              Property="obj => obj?.FechaProgramacion" />
                        </label>
                    </div>
                    <br />
                    <div style="margin-right: 10px;">
                        <FluentCheckbox Name="Implante" @bind-Value="Alumno.Implante" Label="Implante" />
                        <FluentValidationMessage For="@(() => Alumno.Implante)" />
                         <br />
                        <label>
                            Fecha de implante:
                            <InputDate @bind-Value="Alumno.FechaImplante" />
                            <ConcurrencyField Model="Alumno"
                                              DbModel="DbAlumno"
                                              Property="obj => obj?.FechaImplante" />
                        </label>
                        <br />
                        <label>
                            Fecha de Conexion:
                            <InputDate @bind-Value="Alumno.FechaConexion" />
                            <ConcurrencyField Model="Alumno"
                                              DbModel="DbAlumno"
                                              Property="obj => obj?.FechaConexion" />
                        </label>
                    </div>
                    <h2>Datos del Tutor</h2>
                    <div style="margin-right: 10px;">
                        <FluentTextField Name="NombreTutor" @bind-Value="Alumno.NombreTutor" Label="Nombre del Tutor" />
                        <FluentValidationMessage For="@(() => Alumno.NombreTutor)" />
                        <ConcurrencyField Model="Alumno"
                                          DbModel="DbAlumno"
                                          Property="obj => obj?.NombreTutor" />
                    </div>
                    <div>
                        <FluentTextField Name="ApellidoPaternoTutor" @bind-Value="Alumno.ApellidoPaternoTutor" Label="Apellidos del Tutor"  />
                        <FluentValidationMessage For="@(() => Alumno.ApellidoPaternoTutor)" />
                        <ConcurrencyField Model="Alumno"
                                          DbModel="DbAlumno"
                                          Property="obj => obj?.ApellidoPaternoTutor" />
                        <FluentTextField Name="ApellidoMaternoTutor" @bind-Value="Alumno.ApellidoMaternoTutor" Label="Apelldio Materno" />
                        <FluentValidationMessage For="@(() => Alumno.ApellidoMaternoTutor)" />
                        <ConcurrencyField Model="Alumno"
                                          DbModel="DbAlumno"
                                          Property="obj => obj?.ApellidoMaternoTutor" />

                    </div>
                    <div>
                        <FluentTextField Name="Telefono" Rows=5 Cols=60 @bind-Value="Alumno.Telefono" Label="Telefono"  />
                        <FluentValidationMessage For="@(() => Alumno.Telefono)" />
                        <ConcurrencyField Model="Alumno"
                                          DbModel="DbAlumno"
                                          Property="obj => obj?.Telefono" />
                    </div>                    
                    <div>
                        <FluentTextField Name="Correo" Rows=5 Cols=60 @bind-Value="Alumno.Correo" Label="Correo"  />
                        <FluentValidationMessage For="@(() => Alumno.Correo)" />
                        <ConcurrencyField Model="Alumno"
                                          DbModel="DbAlumno"
                                          Property="obj => obj?.Correo" />
                    </div>                    
                    <div>
                        <FluentTextArea Name="Direccion" Rows=5 Cols=60 @bind-Value="Alumno.Direccion" Label="Direccion"  />
                        <FluentValidationMessage For="@(() => Alumno.Direccion)" />
                        <ConcurrencyField Model="Alumno"
                                          DbModel="DbAlumno"
                                          Property="obj => obj?.Direccion" />
                    </div>
                    <br />
                    <h2>Comentarios</h2>
                    <div style="margin-right: 10px;">
                        <FluentTextArea Name="Comentarios" Rows=5 Cols=60 @bind-Value="Alumno.Comentarios" Label="Comentarios" />
                        <FluentValidationMessage For="@(() => Alumno.Comentarios)" />
                        <ConcurrencyField Model="Alumno"
                                          DbModel="DbAlumno"
                                          Property="obj => obj?.Comentarios" />
                    </div>
                    <br />
                    <h2>Activo/Fecha de egreso</h2>
                    <div style="margin-right: 10px;">
                        <FluentCheckbox Name="Activo" @bind-Value="Alumno.Activo" Label="Activo"  />
                        <FluentValidationMessage For="@(() => Alumno.Activo)" />
                    </div>
                    <div style="margin-right: 10px;">
                        <label>
                            Fecha de egreso:
                            <InputDate @bind-Value="Alumno.FechaEgreso" />
                            <ConcurrencyField Model="Alumno"
                                              DbModel="DbAlumno"
                                              Property="obj => obj?.FechaEgreso" />
                        </label>
                    </div>
                    <br />
                </FluentStack>
                <FluentButton disabled="@Busy" BackgroundColor="Red"
                              @onclick="CancelAsync" Type="ButtonType.Button" Appearance="Appearance.Accent">Cancel</FluentButton>

                <FluentButton disabled="@Busy" Type="ButtonType.Submit" Appearance="Appearance.Accent">Submit</FluentButton>

            </FluentBodyContent>
        </FluentCard>
    </EditForm>
}

@code {
    // Let parent handle result of validation.
    [Parameter]
    public EventCallback<bool> ValidationResult { get; set; }

    // Let parent handle what to do on cancel.
    [Parameter]
    public EventCallback CancelRequest { get; set; }

    // True if add mode.
    [Parameter]
    public bool IsAdd { get; set; }

    // The Contact to upsert.
    [Parameter]
    public Alumno? Alumno { get; set; }

    // The database version of Contact if a concurrency issue.
    [Parameter]
    public Alumno? DbAlumno { get; set; }

    // Prevent multiple asynchronous operations at the same time.
    [Parameter]
    public bool Busy { get; set; }

    // Mode.
    private string Mode => IsAdd ? "Add" : "Edit";

    // Ask to cancel.
    private Task CancelAsync()
    {
        return CancelRequest.InvokeAsync(null);
    }

    // Handle form submission request.
    // isValid: True when field validation passed.
    private Task HandleSubmitAsync(bool isValid)
    {
        return ValidationResult.InvokeAsync(isValid);
    }
}