@using Microsoft.AspNetCore.Components.Forms;

<h1>@Mode Tutor</h1>

<hr />
@if (Tutor is not null)
{
    <EditForm Model="Tutor"
              OnInvalidSubmit="(async () => await HandleSubmitAsync(false))"
              OnValidSubmit="(async () => await HandleSubmitAsync(true))">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <h2>🆔 Identificacion </h2>
        <p>
            <label>
                Nombre:
                <InputText @bind-Value="Tutor.Nombre" />
                <ConcurrencyField Model="Tutor"
                                  DbModel="DbTutor"
                                  Property="obj => obj?.Nombre" />
            </label>
            <label>
                Apellido:
                <InputText @bind-Value="Tutor.Apellido" />
                <ConcurrencyField Model="Tutor"
                                  DbModel="DbTutor"
                                  Property="obj => obj?.Tutor" />
            </label>
        </p>
        <h2> Informacion de contacto </h2>
        <p>
            <label>
                Correo:
                <InputText @bind-Value="Tutor.Correo" />
                <ConcurrencyField Model="Tutor"
                                  DbModel="DbTutor"
                                  Property="obj => obj?.Correo" />
            </label>
            <label>
                Telefono:
                <InputText @bind-Value="Tutor.Telefono" />
                <ConcurrencyField Model="Tutor"
                                  DbModel="DbTutor"
                                  Property="obj => obj?.Telefono" />
            </label>
            <label>
                <input type="checkbox" name="Direccion" value="true"> Misma direccion del Alumno
            </label>
            <label>
                Direccion:
                <InputText @bind-Value="Tutor.Direccion" />
                <ConcurrencyField Model="Tutor"
                                  DbModel="DbTutor"
                                  Property="obj => obj?.Direccion" />
            </label>

        </p>
        <h2>Pago y padrino</h2>
        <p>
            <label>
                Cuanto sera el pago:
                <InputText @bind-Value="Tutor.Pago" />
                <ConcurrencyField Model="Tutor"
                                  DbModel="DbTutor"
                                  Property="obj => obj?.Pago" />
            </label>

            <label>
                <input type="checkbox" name="PatrocinioActivo" value="true"> PatrocinioActivo
            </label>

            <label>
                Donacion:
                <InputText @bind-Value="Tutor.Donacion" />
                <ConcurrencyField Model="Tutor"
                                  DbModel="DbTutor"
                                  Property="obj => obj?.Donacion" />
            </label>
            <label>
                Detalles de la donacion:
                <InputText @bind-Value="Tutor.DetallesAyuda" />
                <ConcurrencyField Model="Tutor"
                                  DbModel="DbTutor"
                                  Property="obj => obj?.DetallesAyuda" />
            </label>

        </p>
        <br />
        <button disabled="@Busy" class="btn btn-warning"
                @onclick="CancelAsync">
            Cancel
        </button>&nbsp;
        <button disabled="@Busy" type="submit"
                class="btn btn-primary">
            Submit
        </button>
    </EditForm>
}

@code {
    // Let parent handle result of validation.
    [Parameter]
    public EventCallback<bool> ValidationResult { get; set; }

    // Let parent handle what to do on cancel.
    [Parameter]
    public EventCallback CancelRequest { get; set; }

    // True if add mode.
    [Parameter]
    public bool IsAdd { get; set; }

    // The Contact to upsert.
    [Parameter]
    public Tutor? Tutor { get; set; }

    // The database version of Contact if a concurrency issue.
    [Parameter]
    public Tutor? DbTutor { get; set; }

    // Prevent multiple asynchronous operations at the same time.
    [Parameter]
    public bool Busy { get; set; }

    // Mode.
    private string Mode => IsAdd ? "Add" : "Edit";

    // Ask to cancel.
    private Task CancelAsync()
    {
        return CancelRequest.InvokeAsync(null);
    }

    // Handle form submission request.
    // isValid: True when field validation passed.
    private Task HandleSubmitAsync(bool isValid)
    {
        return ValidationResult.InvokeAsync(isValid);
    }
}
