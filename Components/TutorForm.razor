@using Microsoft.AspNetCore.Components.Forms;
@inject IPageHelper PageHelper
@inject NavigationManager NavigationManager;


<h1>@Mode Tutor</h1>

<hr />
@if (Tutor is not null)
{
    <EditForm Model="Tutor"
              OnInvalidSubmit="(async () => await HandleSubmitAsync(false))"
              OnValidSubmit="(async () => await HandleSubmitAsync(true))">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <FluentCard>
            <FluentBodyContent>
                <FluentStack Orientation="Orientation.Vertical">
                    <h2>Identificacion</h2>
                    <div style="margin-right: 10px;">
                        <FluentTextField Name="Nombre" @bind-Value="Tutor.Nombre" Label="Nombre del Padrino" />
                        <FluentValidationMessage For="@(() => Tutor.Nombre)" />
                        <ConcurrencyField Model="Tutor"
                                          DbModel="DbTutor"
                                          Property="obj => obj?.Nombre" />
                    </div>
                    <div style="margin-right: 10px;">
                        <FluentTextField Name="Apellido" @bind-Value="Tutor.ApellidoPaterno" Label="Apellidos" />
                        <FluentValidationMessage For="@(() => Tutor.ApellidoPaterno)" />
                        <ConcurrencyField Model="Tutor"
                                          DbModel="DbTutor"
                                          Property="obj => obj?.ApellidoPaterno" />
                        <FluentTextField Name="Apellido:" @bind-Value="Tutor.ApellidoMaterno" Label="" />
                        <FluentValidationMessage For="@(() => Tutor.ApellidoMaterno)" />
                        <ConcurrencyField Model="Tutor"
                                          DbModel="DbTutor"
                                          Property="obj => obj?.ApellidoMaterno" />
                    </div>
                    <br />
                    <h2>Otra Persona por contactar</h2>
                    <br />
                    <div style="margin-right: 10px;">
                        <FluentTextField Name="Nombre" @bind-Value="Tutor.NombreP1" Label="Nombre" />
                        <FluentValidationMessage For="@(() => Tutor.NombreP1)" />
                        <ConcurrencyField Model="Tutor"
                                          DbModel="DbTutor"
                                          Property="obj => obj?.NombreP1" />
                    </div>
                    <div style="margin-right: 10px;">
                        <FluentTextField Name="Apellido" @bind-Value="Tutor.ApellidoPaternoP1" Label="Apellidos" />
                        <FluentValidationMessage For="@(() => Tutor.ApellidoPaternoP1)" />
                        <ConcurrencyField Model="Tutor"
                                          DbModel="DbTutor"
                                          Property="obj => obj?.ApellidoPaternoP1" />
                        <FluentTextField Name="Apellido:" @bind-Value="Tutor.ApellidoMaternoP1" Label="" />
                        <FluentValidationMessage For="@(() => Tutor.ApellidoMaternoP1)" />
                        <ConcurrencyField Model="Tutor"
                                          DbModel="DbTutor"
                                          Property="obj => obj?.ApellidoMaternoP1" />
                    </div>
                    <br />                    
                    <h2>Informacion de Contacto</h2>
                    <br />
                    <div style="margin-right: 10px;">
                        <FluentTextField Name="Correo" @bind-Value="Tutor.Correo" Label="Correo" />
                        <FluentValidationMessage For="@(() => Tutor.Correo)" />
                        <ConcurrencyField Model="Tutor"
                                          DbModel="DbTutor"
                                          Property="obj => obj?.Correo" />
                    </div>
                    <div style="margin-right: 10px;">
                        <FluentTextField Name="TelefonoEmpresa" @bind-Value="Tutor.TelefonoEmpresa" Label="Telefono de la Empresa" />
                        <FluentValidationMessage For="@(() => Tutor.TelefonoEmpresa)" />
                        <ConcurrencyField Model="Tutor"
                                          DbModel="DbTutor"
                                          Property="obj => obj?.TelefonoEmpresa" />
                    </div>
                    <div style="margin-right: 10px;">
                        <FluentTextField Name="Telefono" @bind-Value="Tutor.Telefono" Label="Telefono" />
                        <FluentValidationMessage For="@(() => Tutor.Telefono)" />
                        <ConcurrencyField Model="Tutor"
                                          DbModel="DbTutor"
                                          Property="obj => obj?.Telefono" />
                    </div>                    
                    <div style="margin-right: 10px;">
                        <FluentTextField Name="Direccion" @bind-Value="Tutor.Direccion" Label="Direccion" />
                        <FluentValidationMessage For="@(() => Tutor.Direccion)" />
                        <ConcurrencyField Model="Tutor"
                                          DbModel="DbTutor"
                                          Property="obj => obj?.Direccion" />
                    </div>
                    <br />
                    <h2>Datos Fiscales</h2>
                    <br />
                    <div style="margin-right: 10px;">
                        <FluentTextField Name="Nombre Fiscal" @bind-Value="Tutor.NombreFiscal" Label="Nombre Fiscal" />
                        <FluentValidationMessage For="@(() => Tutor.NombreFiscal)" />
                        <ConcurrencyField Model="Tutor"
                                          DbModel="DbTutor"
                                          Property="obj => obj?.NombreFiscal" />
                    </div>
                    <div style="margin-right: 10px;">
                        <FluentTextField Name="RFC" @bind-Value="Tutor.RFC" Label="RFC" />
                        <FluentValidationMessage For="@(() => Tutor.RFC)" />
                        <ConcurrencyField Model="Tutor"
                                          DbModel="DbTutor"
                                          Property="obj => obj?.RFC" />
                    </div>
                    <div style="margin-right: 10px;">
                        <FluentCheckbox Name="PersonaF" @bind-Value="Tutor.PersonaF" Label="PersonaF" />
                        <FluentValidationMessage For="@(() => Tutor.PersonaF)" />
                        <br />
                        <label>
                            Persona Fisica:
                            <InputSelect @bind-Value="Tutor.PersonaFisica">
                                @foreach (var personaFisica in Enum.GetValues(typeof(PersonaFisicaUSOCFDI)))
                                {
                                    <option value="@personaFisica">@personaFisica</option>
                                }
                            </InputSelect>
                            <ConcurrencyField Model="Tutor"
                                              DbModel="DbTutor"
                                              Property="obj => obj?.PersonaFisica" />
                        </label>
                        <br />
                    </div>
                    <div style="margin-right: 10px;">
                        <FluentCheckbox Name="PersonaM" @bind-Value="Tutor.PersonaM" Label="PersonaM" />
                        <FluentValidationMessage For="@(() => Tutor.PersonaM)" />
                        <br />
                        <label>
                            Persona Moral:
                            <InputSelect @bind-Value="Tutor.PersonaMoral">
                                @foreach (var personaMoral in Enum.GetValues(typeof(PersonaMoralUSOCFDI)))
                                {
                                    <option value="@personaMoral">@personaMoral</option>
                                }
                            </InputSelect>
                            <ConcurrencyField Model="Tutor"
                                              DbModel="DbTutor"
                                              Property="obj => obj?.PersonaMoral" />
                        </label>
                        <br />
                    </div>
                    <div style="margin-right: 10px;">
                        <FluentNumberField Name="Donacion" @bind-Value="Tutor.Donacion" Label="Donacion" />
                        <FluentValidationMessage For="@(() => Tutor.Donacion)" />
                        <ConcurrencyField Model="Tutor"
                                          DbModel="DbTutor"
                                          Property="obj => obj?.Donacion" />
                    </div>
                    <div style="margin-right: 10px;">
                        <FluentTextArea Name="DetallesAyuda" Rows=5 Cols=60 @bind-Value="Tutor.DetallesAyuda" Label="Detalles de Ayuda" />
                        <FluentValidationMessage For="@(() => Tutor.DetallesAyuda)" />
                        <ConcurrencyField Model="Tutor"
                                          DbModel="DbTutor"
                                          Property="obj => obj?.DetallesAyuda" />
                    </div>
                    <br />
                    <h2>Empresa</h2>
                    <div style="margin-right: 10px;">
                        <FluentTextField Name="EmpresaNombre" @bind-Value="Tutor.EmpresaNombre" Label="Nombre de la Empresa" />
                        <FluentValidationMessage For="@(() => Tutor.EmpresaNombre)" />
                        <ConcurrencyField Model="Tutor"
                                          DbModel="DbTutor"
                                          Property="obj => obj?.EmpresaNombre" />
                    </div>
                    <div>
                        <label>
                            Tipo de Empresa:
                            <InputSelect @bind-Value="Tutor.TipoEmp">
                                @foreach (var tipoEmpresa in Enum.GetValues(typeof(TipoEmpresa)))
                                {
                                    <option value="@tipoEmpresa">@tipoEmpresa</option>
                                }
                            </InputSelect>
                            <ConcurrencyField Model="Tutor"
                                              DbModel="DbTutor"
                                              Property="obj => obj?.TipoEmp" />
                        </label>
                    </div>
                    <div style="margin-right: 10px;">
                        <FluentTextArea Name="InformacionExtra" Rows=5 Cols=60 @bind-Value="Tutor.InformacionExtra" Label="Informacion extra" />
                        <FluentValidationMessage For="@(() => Tutor.InformacionExtra)" />
                        <ConcurrencyField Model="Tutor"
                                          DbModel="DbTutor"
                                          Property="obj => obj?.InformacionExtra" />
                    </div>
                    <br />
                </FluentStack>
                <FluentButton disabled="@Busy" BackgroundColor="Red"
                              @onclick="NavigateBack" Type="ButtonType.Button" Appearance="Appearance.Accent">Cancelar</FluentButton>

                <FluentButton disabled="@Busy" Type="ButtonType.Submit" Appearance="Appearance.Accent">Guardar</FluentButton>

            </FluentBodyContent>
        </FluentCard>
    </EditForm>
}

@code {
    // Let parent handle result of validation.
    [Parameter]
    public EventCallback<bool> ValidationResult { get; set; }

    // Let parent handle what to do on cancel.
    [Parameter]
    public EventCallback CancelRequest { get; set; }

    // True if add mode.
    [Parameter]
    public bool IsAdd { get; set; }

    // The Contact to upsert.
    [Parameter]
    public Tutor? Tutor { get; set; }

    // The database version of Contact if a concurrency issue.
    [Parameter]
    public Tutor? DbTutor { get; set; }

    // Prevent multiple asynchronous operations at the same time.
    [Parameter]
    public bool Busy { get; set; }

    // Mode.
    private string Mode => IsAdd ? "Add" : "Edit";

    // Ask to cancel.
    private void NavigateBack()
    {
        NavigationManager.NavigateTo($"tutores/{PageHelper.Page}");
    }

    // Handle form submission request.
    // isValid: True when field validation passed.
    private Task HandleSubmitAsync(bool isValid)
    {
        return ValidationResult.InvokeAsync(isValid);
    }
}
