@using Microsoft.AspNetCore.Components.Forms;
@inject IPageHelper PageHelper
@inject NavigationManager NavigationManager;


<h1>@Mode Padrino</h1>

<hr />
@if (Tutor is not null)
{
    <EditForm Model="Tutor"
              OnInvalidSubmit="(async () => await HandleSubmitAsync(false))"
              OnValidSubmit="(async () => await HandleSubmitAsync(true))">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <FluentCard>
            <FluentBodyContent>
                <FluentStack Orientation="Orientation.Vertical">
                    <h2>Identificacion</h2>
                    <div style="margin-right: 10px;">
                        <FluentTextField Name="Nombre" @bind-Value="Tutor.Nombre" Label="Nombre del Padrino" />
                        <FluentValidationMessage For="@(() => Tutor.Nombre)" />
                        <ConcurrencyField Model="Tutor"
                                          DbModel="DbTutor"
                                          Property="obj => obj?.Nombre" />
                    </div>
                    <div style="margin-right: 10px;">
                        <FluentTextField Name="Apellido" @bind-Value="Tutor.ApellidoPaterno" Label="Apellidos" />
                        <FluentValidationMessage For="@(() => Tutor.ApellidoPaterno)" />
                        <ConcurrencyField Model="Tutor"
                                          DbModel="DbTutor"
                                          Property="obj => obj?.ApellidoPaterno" />
                        <FluentTextField Name="Apellido:" @bind-Value="Tutor.ApellidoMaterno" Label="" />
                        <FluentValidationMessage For="@(() => Tutor.ApellidoMaterno)" />
                        <ConcurrencyField Model="Tutor"
                                          DbModel="DbTutor"
                                          Property="obj => obj?.ApellidoMaterno" />
                    </div>
                    <br />
                    <h2>Otra Persona por contactar</h2>
                    <br />
                    <div style="margin-right: 10px;">
                        <FluentTextField Name="Nombre" @bind-Value="Tutor.NombreP1" Label="Nombre" />
                        <FluentValidationMessage For="@(() => Tutor.NombreP1)" />
                        <ConcurrencyField Model="Tutor"
                                          DbModel="DbTutor"
                                          Property="obj => obj?.NombreP1" />
                    </div>
                    <div style="margin-right: 10px;">
                        <FluentTextField Name="Apellido" @bind-Value="Tutor.ApellidoPaternoP1" Label="Apellidos" />
                        <FluentValidationMessage For="@(() => Tutor.ApellidoPaternoP1)" />
                        <ConcurrencyField Model="Tutor"
                                          DbModel="DbTutor"
                                          Property="obj => obj?.ApellidoPaternoP1" />
                        <FluentTextField Name="Apellido:" @bind-Value="Tutor.ApellidoMaternoP1" Label="" />
                        <FluentValidationMessage For="@(() => Tutor.ApellidoMaternoP1)" />
                        <ConcurrencyField Model="Tutor"
                                          DbModel="DbTutor"
                                          Property="obj => obj?.ApellidoMaternoP1" />
                    </div>
                    <br />
                    <h2>Informacion de Contacto</h2>
                    <br />
                    <div style="margin-right: 10px;">
                        <FluentTextField Name="Correo" @bind-Value="Tutor.Correo" Label="Correo" />
                        <FluentValidationMessage For="@(() => Tutor.Correo)" />
                        <ConcurrencyField Model="Tutor"
                                          DbModel="DbTutor"
                                          Property="obj => obj?.Correo" />
                    </div>
                    <div style="margin-right: 10px;">
                        <FluentTextField Name="TelefonoEmpresa" @bind-Value="Tutor.TelefonoEmpresa" Label="Telefono de la Empresa" />
                        <FluentValidationMessage For="@(() => Tutor.TelefonoEmpresa)" />
                        <ConcurrencyField Model="Tutor"
                                          DbModel="DbTutor"
                                          Property="obj => obj?.TelefonoEmpresa" />
                    </div>
                    <div style="margin-right: 10px;">
                        <FluentTextField Name="Telefono" @bind-Value="Tutor.Telefono" Label="Telefono" />
                        <FluentValidationMessage For="@(() => Tutor.Telefono)" />
                        <ConcurrencyField Model="Tutor"
                                          DbModel="DbTutor"
                                          Property="obj => obj?.Telefono" />
                    </div>
                    <div style="margin-right: 10px;">
                        <FluentTextArea Name="Direccion" Rows=5 Cols=60 @bind-Value="Tutor.Direccion" Label="Direccion" />
                        <FluentValidationMessage For="@(() => Tutor.Direccion)" />
                        <ConcurrencyField Model="Tutor"
                                          DbModel="DbTutor"
                                          Property="obj => obj?.Direccion" />
                    </div>
                    <br />
                    <h2>Donacion</h2>
                    <br />
                    <div style="margin-right: 10px;">
                        <FluentNumberField Name="Donacion" @bind-Value="Tutor.Donacion" Label="Donacion" />
                        <FluentValidationMessage For="@(() => Tutor.Donacion)" />
                        <ConcurrencyField Model="Tutor"
                                          DbModel="DbTutor"
                                          Property="obj => obj?.Donacion" />
                    </div>
                    <div>
                        <FluentSelect Id="MetodoPago" @bind-Value="Tutor.MetodoPago" TOption="string" Required Label="Metodo de Pago">
                            <FluentOption Value="">Seleccione Metodo de Pago ...</FluentOption>
                            <FluentOption Value="Efectivo">Efectivo</FluentOption>
                            <FluentOption Value="Tarjeta de Debito">Tarjeta de Debito</FluentOption>
                            <FluentOption Value="Tarjeta de Credito">Tarjeta de Credito</FluentOption>
                            <FluentOption Value="Transferencia">Transferencia</FluentOption>
                        </FluentSelect>
                        <FluentValidationMessage For="@(() => Tutor.MetodoPago)" />
                    </div>
                    <br />
                    <div>
                        <FluentSelect Id="PeriocidadPago" @bind-Value="Tutor.PeriocidadPago" TOption="string" Required Label="Periocidad de Pago">
                            <FluentOption Value="">Selecciona la periocidad ...</FluentOption>
                            <FluentOption Value="Mensual">Mensual</FluentOption>
                            <FluentOption Value="Anual">Anual</FluentOption>
                        </FluentSelect>
                        <FluentValidationMessage For="@(() => Tutor.PeriocidadPago)" />
                    </div>
                    <br />
                    <div style="margin-right: 10px;">
                        <FluentTextArea Name="DetallesAyuda" Rows=5 Cols=60 @bind-Value="Tutor.DetallesAyuda" Label="Detalles de Ayuda" />
                        <FluentValidationMessage For="@(() => Tutor.DetallesAyuda)" />
                        <ConcurrencyField Model="Tutor"
                                          DbModel="DbTutor"
                                          Property="obj => obj?.DetallesAyuda" />
                    </div>
                    <br />
                    <h2>Datos Fiscales</h2>
                    <br />
                    <div style="margin-right: 10px;">
                        <FluentTextField Name="Nombre Fiscal" @bind-Value="Tutor.NombreFiscal" Label="Nombre Fiscal" />
                        <FluentValidationMessage For="@(() => Tutor.NombreFiscal)" />
                        <ConcurrencyField Model="Tutor"
                                          DbModel="DbTutor"
                                          Property="obj => obj?.NombreFiscal" />
                    </div>
                    <div style="margin-right: 10px;">
                        <FluentTextField Name="RFC" @bind-Value="Tutor.RFC" Label="RFC" />
                        <FluentValidationMessage For="@(() => Tutor.RFC)" />
                        <ConcurrencyField Model="Tutor"
                                          DbModel="DbTutor"
                                          Property="obj => obj?.RFC" />
                    </div>
                    <div style="margin-right: 10px;">
                        <FluentCheckbox Name="PersonaF" @bind-Value="Tutor.PersonaF" Label="PersonaF" />
                        <FluentValidationMessage For="@(() => Tutor.PersonaF)" />
                    </div>
                    <br />
                    <div>
                        <FluentSelect Id="PersonFisica" @bind-Value="Tutor.PersonaFisica" TOption="string" Required Label="Persona Fisica">
                            <FluentOption Value="">Selecciona CFDI ...</FluentOption>
                            <FluentOption Value="Aquisicion de mercancias">Aquisicion de mercancias</FluentOption>
                            <FluentOption Value="Devoluciones, Descuentos o bonificaciones">Devoluciones, Descuentos o bonificaciones</FluentOption>
                            <FluentOption Value="Gastos en general">Gastos en general</FluentOption>
                            <FluentOption Value="Construcciones">Construcciones</FluentOption>
                            <FluentOption Value="Mobiliarios y equipo de oficina por inversiones"> Mobiliarios y equipo de oficina por inversiones</FluentOption>
                            <FluentOption Value="Equipo de transporte">Equipo de transporte</FluentOption>
                            <FluentOption Value="Equipo de computo y accesorios">Equipo de computo y accesorios</FluentOption>
                            <FluentOption Value="Dados, troqueles, moldes, matrices y herramental">Dados, troqueles, moldes, matrices y herramental</FluentOption>
                            <FluentOption Value="Comunicacion telefonicas">Comunicacion telefonicas</FluentOption>
                            <FluentOption Value="Comunicacion satelitales">Comunicacion satelitales</FluentOption>
                            <FluentOption Value="Otro maquinaria y equipo">Otro maquinaria y equipo</FluentOption>
                            <FluentOption Value="Honorarios medicos, dentales y gastos hospitalarios">Honorarios medicos, dentales y gastos hospitalarios</FluentOption>
                            <FluentOption Value="Gastos medicos por incapacidad o discapacidad">Gastos medicos por incapacidad o discapacidad</FluentOption>
                            <FluentOption Value="Gastos funerales">Gastos funerales</FluentOption>
                            <FluentOption Value="Donativas">Donativas</FluentOption>
                            <FluentOption Value="Intereses reales efectivamente pagados por creditos hipotecarios (casa habitacion">Intereses reales efectivamente pagados por creditos hipotecarios (casa habitacion</FluentOption>
                            <FluentOption Value="Aportaciones voluntarias al SAR">Aportaciones voluntarias al SAR</FluentOption>
                            <FluentOption Value="Primas por seguros de gastos medicos">Primas por seguros de gastos medicos</FluentOption>
                            <FluentOption Value="Gastos de transportacion escolar obligatoria">Gastos de transportacion escolar obligatoria</FluentOption>
                            <FluentOption Value="Depositos en cuentas para el ahorro, primas que tengan como base de planes de pensiones">Depositos en cuentas para el ahorro, primas que tengan como base de planes de pensiones</FluentOption>
                            <FluentOption Value="Pagos por servicios educativos (Colegiaturas">Pagos por servicios educativos (Colegiaturas</FluentOption>
                            <FluentOption Value="Sin efectos fiscales">Sin efectos fiscales</FluentOption>
                            <FluentOption Value="Pagos">Pagos</FluentOption>
                            <FluentOption Value="Nomica">Nomica</FluentOption>
                        </FluentSelect>
                        <FluentValidationMessage For="@(() => Tutor.PersonaFisica)" />
                    </div>
                    <br />
                    <br />
                    <div style="margin-right: 10px;">
                        <FluentCheckbox Name="PersonaM" @bind-Value="Tutor.PersonaM" Label="PersonaM" />
                        <FluentValidationMessage For="@(() => Tutor.PersonaM)" />
                    </div>
                    <br />
                    <div>
                        <FluentSelect Id="PersonMoral" @bind-Value="Tutor.PersonaMoral" TOption="string" Required Label="Persona Moral">
                            <FluentOption Value="">Selecciona CFDI ...</FluentOption>
                            <FluentOption Value="Aquisicion de mercancias">Aquisicion de mercancias</FluentOption>
                            <FluentOption Value="Devoluciones, Descuentos o bonificaciones">Devoluciones, Descuentos o bonificaciones</FluentOption>
                            <FluentOption Value="Gastos en general">Gastos en general</FluentOption>
                            <FluentOption Value="Construcciones">Construcciones</FluentOption>
                            <FluentOption Value="Mobiliarios y equipo de oficina por inversiones"> Mobiliarios y equipo de oficina por inversiones</FluentOption>
                            <FluentOption Value="Equipo de transporte">Equipo de transporte</FluentOption>
                            <FluentOption Value="Equipo de computo y accesorios">Equipo de computo y accesorios</FluentOption>
                            <FluentOption Value="Dados, troqueles, moldes, matrices y herramental">Dados, troqueles, moldes, matrices y herramental</FluentOption>
                            <FluentOption Value="Comunicacion telefonicas">Comunicacion telefonicas</FluentOption>
                            <FluentOption Value="Comunicacion satelitales">Comunicacion satelitales</FluentOption>
                            <FluentOption Value="Otro maquinaria y equipo">Otro maquinaria y equipo</FluentOption>
                            <FluentOption Value="Sin efectos fiscales">Sin efectos fiscales</FluentOption>
                            <FluentOption Value="Pagos">Pagos</FluentOption>
                        </FluentSelect>
                        <FluentValidationMessage For="@(() => Tutor.PersonaMoral)" />
                    </div>
                    <div style="margin-right: 10px;">
                        <FluentTextField Name="CorreoEmpresa" @bind-Value="Tutor.CorreoEmpresa" Label="Correo de Empresa" />
                        <FluentValidationMessage For="@(() => Tutor.Correo)" />
                        <ConcurrencyField Model="Tutor"
                                          DbModel="DbTutor"
                                          Property="obj => obj?.CorreoEmpresa" />
                    </div>
                    <div>
                        <FluentSelect Id="RegimenFiscal" @bind-Value="Tutor.RegimenFiscal" TOption="string" Required Label="Regimen FIscal">
                            <FluentOption Value="">Selecciona Regimen ...</FluentOption>
                            <FluentOption Value="Incorporacion Fiscal">Incorporacion Fiscal</FluentOption>
                            <FluentOption Value="Actividades empresariales y profesionales">Actividades empresariales y profesionales</FluentOption>
                            <FluentOption Value="Arrendamiento de Inmuebles">Arrendamiento de Inmuebles</FluentOption>
                            <FluentOption Value="Servicios Profesionaless">Servicios Profesionales</FluentOption>
                            <FluentOption Value="Régimen simplificado de confianza">Régimen simplificado de confianza</FluentOption>
                            <FluentOption Value="Régimen de Actividades Empresariales con ingresos a través de Plataformas Tecnológicas">Régimen de Actividades Empresariales con ingresos a través de Plataformas Tecnológicas</FluentOption>
                            <FluentOption Value="Régimen de sueldos y salarios">Régimen de sueldos y salarios</FluentOption>
                            <FluentOption Value="Enagenación de bienes">Enagenación de bienes</FluentOption>
                            <FluentOption Value="Ingresos por intereses">Ingresos por intereses</FluentOption>
                            <FluentOption Value="Ingresos por intereses">Ingresos por dividendos</FluentOption>
                            <FluentOption Value="Demás ingresos">Demás ingresos</FluentOption>
                        </FluentSelect>
                        <FluentValidationMessage For="@(() => Tutor.RegimenFiscal)" />
                    </div>
                    <div style="margin-right: 10px;">
                        <FluentTextArea Name="comentarios" Rows=5 Cols=60 @bind-Value="Tutor.comentarios" Label="Comentarios" />
                        <FluentValidationMessage For="@(() => Tutor.comentarios)" />
                        <ConcurrencyField Model="Tutor"
                                          DbModel="DbTutor"
                                          Property="obj => obj?.comentarios" />
                    </div>
                    <br />
                    <h2>Empresa</h2>
                    <div style="margin-right: 10px;">
                        <FluentTextField Name="EmpresaNombre" @bind-Value="Tutor.EmpresaNombre" Label="Nombre de la Empresa" />
                        <FluentValidationMessage For="@(() => Tutor.EmpresaNombre)" />
                        <ConcurrencyField Model="Tutor"
                                          DbModel="DbTutor"
                                          Property="obj => obj?.EmpresaNombre" />
                    </div>
                    <div>
                        <label>
                            Tipo de Empresa:
                            <InputSelect @bind-Value="Tutor.TipoEmp">
                                @foreach (var tipoEmpresa in Enum.GetValues(typeof(TipoEmpresa)))
                                {
                                    <option value="@tipoEmpresa">@tipoEmpresa</option>
                                }
                            </InputSelect>
                            <ConcurrencyField Model="Tutor"
                                              DbModel="DbTutor"
                                              Property="obj => obj?.TipoEmp" />
                        </label>
                    </div>
                    <div style="margin-right: 10px;">
                        <FluentTextArea Name="InformacionExtra" Rows=5 Cols=60 @bind-Value="Tutor.InformacionExtra" Label="Informacion extra" />
                        <FluentValidationMessage For="@(() => Tutor.InformacionExtra)" />
                        <ConcurrencyField Model="Tutor"
                                          DbModel="DbTutor"
                                          Property="obj => obj?.InformacionExtra" />
                    </div>
                    <br />
                </FluentStack>
                <FluentButton disabled="@Busy" BackgroundColor="Red"
                              @onclick="NavigateBack" Type="ButtonType.Button" Appearance="Appearance.Accent">Cancelar</FluentButton>

                <FluentButton disabled="@Busy" Type="ButtonType.Submit" Appearance="Appearance.Accent">Guardar</FluentButton>

            </FluentBodyContent>
        </FluentCard>
    </EditForm>
}

@code {
    // Let parent handle result of validation.
    [Parameter]
    public EventCallback<bool> ValidationResult { get; set; }

    // Let parent handle what to do on cancel.
    [Parameter]
    public EventCallback CancelRequest { get; set; }

    // True if add mode.
    [Parameter]
    public bool IsAdd { get; set; }

    // The Contact to upsert.
    [Parameter]
    public Tutor? Tutor { get; set; }

    // The database version of Contact if a concurrency issue.
    [Parameter]
    public Tutor? DbTutor { get; set; }

    // Prevent multiple asynchronous operations at the same time.
    [Parameter]
    public bool Busy { get; set; }

    // Mode.
    private string Mode => IsAdd ? "add" : "edit";

    // Ask to cancel.
    private void NavigateBack()
    {
        NavigationManager.NavigateTo($"tutores/{PageHelper.Page}");
    }

    // Handle form submission request.
    // isValid: True when field validation passed.
    private Task HandleSubmitAsync(bool isValid)
    {
        return ValidationResult.InvokeAsync(isValid);
    }
}
