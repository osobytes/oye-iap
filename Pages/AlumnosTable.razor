@page "/alumnos"
@page "/alumnos/{Page:int}"
@attribute [Authorize(Roles = "Admin, User")]
@inject IBaseGridControls Filters
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager Navigation
@inject AlumnoQueryAdapter QueryAdapter

<h3>Alumnos</h3>

<GridWrapper @ref="Wrapper"
             FilterChanged="ReloadAsync"
             DeleteRequested="id => Wrapper.DeleteRequestId = id">
    <div class="container-fluid contacts-grid">
        <div class="row">
            <div class="col-8"><TextFilter /></div>
        </div>
        <div class="row">&nbsp;</div>
        <div class="row">
            <div class="col-6">
                Page @Filters.PageHelper.Page of @Filters.PageHelper.PageCount:
                showing @Filters.PageHelper.PageItems of
                @Filters.PageHelper.TotalItemCount items.
                <a disabled="@(Filters.Loading || !Filters.PageHelper.HasPrev)"
                   class="btn btn-primary @IsDisabled(Filters.PageHelper.HasPrev)"
                   href="@Filters.PageHelper.PrevPageAlum">
                    Previous
                </a>
                <a disabled="@(Filters.Loading || !Filters.PageHelper.HasNext)"
                   class="btn btn-primary @IsDisabled(Filters.PageHelper.HasNext)"
                   href="@Filters.PageHelper.NextPageAlum">
                    Next
                </a>
            </div>
        </div>
        <br />
        <a title="Add" href="alumno/add" style="text-decoration:none">
            &nbsp;➕&nbsp;
        </a>
        <a title="Importar" href="Upload/Alumno" style="text-decoration:none">
            &nbsp; <img src="/Importar.png" alt="Importar" style="width: 30px; height: 30px;" /> &nbsp;
        </a>
        <div class="row">&nbsp;</div>
        <div class="row contact-header">
            <div class="col-2">&nbsp;</div>
            <div class="col-1"
                 @onclick="@(async ()=>await ToggleAsync(nameof(Alumno.Nombre)))">
                <ColSortIndicator Column="@(nameof(Alumno.Nombre))" />&nbsp;Nombre
            </div>
            <div class="col-1"
                 @onclick="@(async ()=>await ToggleAsync(nameof(Alumno.ApellidoPaterno)))">
                <ColSortIndicator Column="@(nameof(Alumno.ApellidoPaterno))" />&nbsp;Apellido Paterno
            </div>
            <div class="col-1"
                 @onclick="@(async ()=>await ToggleAsync(nameof(Alumno.ApellidoMaterno)))">
                <ColSortIndicator Column="@(nameof(Alumno.ApellidoMaterno))" />&nbsp;Apellido Materno
            </div>
            <div class="col-2"
                 @onclick="@(async ()=>await ToggleAsync(nameof(Alumno.Direccion)))">
                <ColSortIndicator Column="@(nameof(Alumno.Direccion))" />&nbsp;Direccion
            </div>
            <div class="col-2"
                 @onclick="@(async ()=>await ToggleAsync(nameof(Alumno.FechaIngreso)))">
                 <ColSortIndicator Column="@(nameof(Alumno.FechaIngreso))" />&nbsp;Fecha de Ingreso
            </div>
            <div class="col-2"
                 @onclick="@(async ()=>await ToggleAsync(nameof(Alumno.FechaEgreso)))">
                <ColSortIndicator Column="@(nameof(Alumno.FechaEgreso))" />&nbsp;Fecha de egreso
            </div>
        </div>
        @if (Filters.Loading || Alumnos is null)
        {
            <div class="row">
                <div class="col-12 alert alert-info">
                    Cargando...
                </div>
            </div>
        }
        @if (Alumnos is not null && Alumnos.Count == 0)
        {
            <div class="row">
                <div class="col-12 alert alert-warning">
                    No se encontraron alumnos.
                </div>
            </div>
        }
        @if (Alumnos is not null)
        {
            @foreach (var alumno in Alumnos)
            {
                <AlumnoRow @key=alumno CurrentAlumno="alumno"
                                DeleteAlumno="DeleteAlumnoAsync" />
            }
        }
    </div>
</GridWrapper>


@code {
    // The current page.
    [Parameter]
    public int Page
    {
        get => Filters.PageHelper.Page;
        set
        {
            Filters.PageHelper.Page = value;
        }
    }

    // A wrapper for grid-related activity (like delete).
    private GridWrapper Wrapper { get; set; } = new GridWrapper();

    // Current page of Contact.
    private ICollection<Alumno>? Alumnos { get; set; }

    // Helper method to set disabled on class for paging.
    // condition: When the element is active (and therefore should not be disabled).
    //            Returns the string literal "disabled" or an empty string.
    private string IsDisabled(bool condition) =>
        !Filters.Loading && condition ? "" : "disabled";

    // Keeps track of the last page loaded.
    private int _lastPage = -1;

    // Main logic when getting started.
    protected override void OnAfterRender(bool firstRender)
    {
        // Ensure we're on the same (correct) page.
        if (_lastPage < 1)
        {
            Navigation.NavigateTo("alumnos/1");
            return;
        }

        // Normalize the page values.
        if (Filters.PageHelper.PageCount > 0)
        {
            if (Page < 1)
            {
                Navigation.NavigateTo("alumnos/1");
                return;
            }
            if (Page > Filters.PageHelper.PageCount)
            {
                Navigation.NavigateTo($"alumnos/{Filters.PageHelper.PageCount}");
                return;
            }
        }
        base.OnAfterRender(firstRender);
    }

    // Triggered for any paging update.
    protected override async Task OnParametersSetAsync()
    {
        // Make sure the page really changed.
        if (Page != _lastPage)
        {
            _lastPage = Page;
            await ReloadAsync();
        }
        await base.OnParametersSetAsync();
    }

    // Used to toggle the grid sort. Will either switch to "ascending" on a new
    // column, or toggle between "ascending" and "descending" on a column with the
    // sort already set.
    private Task ToggleAsync(string col)
    {
        if (Filters.SortColumn == col)
        {
            Filters.SortAscending = !Filters.SortAscending;
        }
        else
        {
            Filters.SortColumn = col;
        }
        return ReloadAsync();
    }

    private async Task DeleteAlumnoAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Filters.Loading = true;

        if (Wrapper is not null && context.Alumnos is not null)
        {
            var alumno = await context.Alumnos
                .FirstAsync(c => c.Id == Wrapper.DeleteRequestId);

            if (alumno is not null)
            {
                context.Alumnos?.Remove(alumno);
                await context.SaveChangesAsync();
            }
        }

        Filters.Loading = false;

        await ReloadAsync();
    }

    // Reload page based on filters and paging controls.
    private async Task ReloadAsync()
    {
        if (Filters.Loading || Page < 1)
        {
            return;
        }

        Filters.Loading = true;

        if (Wrapper is not null)
        {
            Wrapper.DeleteRequestId = 0;
        }

        Alumnos = new List<Alumno>();

        using var context = DbFactory.CreateDbContext();
        var query = context.Alumnos?.AsQueryable();

        if (query is not null)
        {
            // Run the query to load the current page.
            Alumnos = await QueryAdapter.FetchAsync(query);
        }

        Filters.Loading = false;
    }
}