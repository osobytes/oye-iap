@page "/alumno/view/{AlumnoId:int}"
@attribute [Authorize(Roles = "Admin, User")]
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject IPageHelper PageHelper
@inject EditSuccess EditSuccessState
@inject NavigationManager NavigationManager;

@if (NotFound && !Loading)
{
    <FluentMessageBar Title="@Mensajes.AlumnoNotFoundTitle" Intent="@MessageIntent.Warning">
        @Mensajes.AlumnoNotFoundMessage
    </FluentMessageBar>
}
else
{
    @if (Alumno is null || Loading)
    {
        <FluentProgressRing></FluentProgressRing>
    }
    else
    {
    <FluentCard>
            <FluentHeader>
                @Alumno.ApellidoPaterno @Alumno.ApellidoMaterno @Alumno.Nombre
            </FluentHeader>
            <br />
            @if (EditSuccess)
            {   
                <FluentMessageBar Title="@Mensajes.EditMessageTitle" Intent="@MessageIntent.Success">
                    @Mensajes.EditSuccessMessage
                </FluentMessageBar>
            }
        <FluentGrid>
            <FluentGridItem xs="6" sm="3">
                <FluentCard>
                    <FluentLabel Weight="FontWeight.Bold"> Detalles de alumno</FluentLabel>
                    <FluentLabel>Activo: @(Alumno.Activo ? "Si" : "No")</FluentLabel>
                    <FluentLabel>Fecha Ingreso: @Alumno.FechaIngreso</FluentLabel>
                    @if (Alumno.FechaEgreso.HasValue)
                    {
                    <FluentLabel>Fecha Egreso: @Alumno.FechaEgreso.Value.ToString("dd-MM-yyyy")</FluentLabel>
                    }
                </FluentCard>
            </FluentGridItem>
            <FluentGridItem xs = "6" sm="3">
                <FluentCard>
                    <FluentLabel Weight="FontWeight.Bold">Datos sobre el Alumno</FluentLabel>
                    <FluentLabel>El alumno usa aparato? @(Alumno.Aparato ? "Si" : "No") </FluentLabel>
                    @if (Alumno.Aparato && Alumno.FechaAparato is DateOnly fechaAparato)
                    {
                        <FluentLabel>Fecha de Aparato: @fechaAparato.ToString("dd-MM-yyyy")</FluentLabel>
                        @if(Alumno.Aparato && Alumno.FechaProgramacion is DateOnly fechaProgramacion)
                        {
                            <FluentLabel>Fecha de Porgramacion: @fechaProgramacion.ToString("dd-MM-yyyy")</FluentLabel>
                        }
                    }
                    <FluentLabel>El alumno tiene implante? @(Alumno.Implante ? "Si" : "No") </FluentLabel>
                    @if (Alumno.Aparato && Alumno.FechaImplante is DateOnly fechaImplante)
                    {
                        <FluentLabel>Fecha de Implante: @fechaImplante.ToString("dd-MM-yyyy")</FluentLabel>
                        @if (Alumno.Aparato && Alumno.FechaConexion is DateOnly fechaConexion)
                        {
                            <FluentLabel>Fecha de Conexion: @fechaConexion.ToString("dd-MM-yyyy")</FluentLabel>
                        }
                    }
                </FluentCard>
            </FluentGridItem>
                <FluentGridItem xs="6" sm="3">
                    <FluentCard>
                        <FluentLabel Weight="FontWeight.Bold">Datos sobre el Tutor</FluentLabel>
                        <FluentLabel>Nombre: @(Alumno.NombreTutor)</FluentLabel>
                        <FluentLabel>Apellido Paterno: @(Alumno.ApellidoPaternoTutor)</FluentLabel>
                        <FluentLabel>Apellido Materno: @(Alumno.ApellidoMaternoTutor)</FluentLabel>
                        <FluentLabel>Telefono: @(Alumno.Telefono)</FluentLabel>
                        <FluentLabel>Direccion: @(Alumno.Direccion)</FluentLabel>
                        <FluentLabel>Correo: @(Alumno.Correo)</FluentLabel>
                    </FluentCard>
                </FluentGridItem>
                <FluentGridItem xs="6" sm="3">
                    <FluentCard>
                        <FluentLabel Weight="FontWeight.Bold"> Comentarios</FluentLabel>
                        <FluentLabel> @(Alumno.Comentarios)</FluentLabel>
                    </FluentCard>
                </FluentGridItem>
        </FluentGrid>
        <FluentFooter Style="margin-top: 20px;">
            <FluentButton Style="margin: 5px;" Title="Go Back" OnClick="NavigateBack">🔙 Volver a la tabla</FluentButton>
            <FluentButton Style="margin:5px;" Title="Edit" OnClick="EditAlumno">Editar</FluentButton>
            @if (!Deleted)
            {
                @if (!ShowConfirmation)
                {
                        <FluentButton Color="White" BackgroundColor="Red" Style="margin:5px;" Title="Delete" OnClick="@(() => { ShowConfirmation = true; EditSuccess = false; })">Borrar</FluentButton>
                }
                else
                {
                    <DeletePrompt Confirmation="@(async result => await ConfirmAsync(result))" />
                }
            }
            else
            {
                <FluentButton Title="Deleted" Disabled="true">🚫 This item has been deleted.</FluentButton>
            }
        </FluentFooter>
    </FluentCard>
    }
}

@code {
    // Tracking of asynchronous calls.
    private bool Loading;

    // Id from route of contact.
    [Parameter]
    public int AlumnoId { get; set; }

    // Navigation check.
    private int _lastAlumnoId;

    // True with redirect from successful edit.
    [Parameter]
    public bool EditSuccess { get; set; }

    // Contact entity.
    private Alumno? Alumno { get; set; }

    // Set to true when not found.
    private bool NotFound = false;

    // Set to true when delete is requested.
    private bool ShowConfirmation = false;

    // Set to true when delete is successful.
    private bool Deleted = false;

    // Navigated
    protected override async Task OnParametersSetAsync()
    {
        if (_lastAlumnoId != AlumnoId)
        {
            EditSuccess = EditSuccessState.Success;
            EditSuccessState.Success = false;
            _lastAlumnoId = AlumnoId;
            await LoadContactAsync();
        }
        await base.OnParametersSetAsync();
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo($"alumnos/{PageHelper.Page}");
    }

    private void EditAlumno()
    {
        NavigationManager.NavigateTo($"alumno/edit/{AlumnoId}");
    }

    // Confirm deletion.
    // result is True when user confirmed.
    private async Task ConfirmAsync(bool result)
    {
        if (result)
        {
            await DeleteAsync();
        }
        else
        {
            ShowConfirmation = false;
            EditSuccess = false;
        }
    }

    // Loads the contact.
    private async Task LoadContactAsync()
    {
        if (Loading)
        {
            return; //avoid concurrent requests.
        }

        NotFound = false;
        Alumno = null;

        Loading = true;

        using var context = DbFactory.CreateDbContext();

        if (context.Alumnos is not null)
        {
            Alumno = await context.Alumnos
                .AsNoTracking()
                .SingleOrDefaultAsync(
                    c => c.Id == AlumnoId);

            if (Alumno is null)
            {
                NotFound = true;
            }
        }

        Loading = false;
    }

    // Deletes the contact.
    private async Task DeleteAsync()
    {
        if (Loading)
        {
            // Avoid concurrent requests.
            return;
        }

        Loading = true;
        using var context = DbFactory?.CreateDbContext();

        if (context?.Alumnos is not null)
        {
            var alumno = await context.Alumnos
                .SingleOrDefaultAsync(c => c.Id == AlumnoId);

            if (alumno is not null)
            {
                context.Alumnos?.Remove(alumno);
                await context.SaveChangesAsync();
                Loading = false;
                Deleted = true;
            }
            else
            {
                Loading = false;
                // Show not found.
                await LoadContactAsync();
            }
        }
        else
        {
            Loading = false;
            // Show not found.
            await LoadContactAsync();
        }
    }

    private static class Mensajes
    {
        public const string AlumnoNotFoundTitle = "Alumno no encontrado.";
        public const string AlumnoNotFoundMessage = "El alumno con ese Id no ha sido encontrado en la base de datos.";
        public const string EditMessageTitle = "Alumno Actualizado";
        public const string EditSuccessMessage = "El alumno se ha actualizado exitosamente.";
    }
}