@page "/institucion/view/{InstitucionId:int}"
@attribute [Authorize(Roles = "Admin, User")]
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject IPageHelper PageHelper
@inject EditSuccess EditSuccessState
@inject NavigationManager NavigationManager;

@if (NotFound && !Loading)
{
    <FluentMessageBar Title="@Mensajes.InstitucionNotFoundTitle" Intent="@MessageIntent.Warning">
        @Mensajes.InstitucionNotFoundMessage
    </FluentMessageBar>
}
else
{
    @if (Institucion is null || Loading)
    {
        <FluentProgressRing></FluentProgressRing>
    }
    else
    {
    <FluentCard>
        <FluentHeader>
            @Institucion.Nombre
        </FluentHeader>
        <br />
        @if (EditSuccess)
        {
                <FluentMessageBar Title="@Mensajes.EditMessageTitle" Intent="@MessageIntent.Success">
                    @Mensajes.EditSuccessMessage
                </FluentMessageBar>
        }
        <FluentGrid>
            <FluentGridItem xs="6" sm="4">
                <FluentCard>
                    <FluentLabel Weight="FontWeight.Bold">Contacto</FluentLabel>
                    <FluentLabel>Correo: @Institucion.Correo</FluentLabel>
                    <FluentLabel>Telefono: @Institucion.Telefono</FluentLabel>
                    <FluentLabel Weight="FontWeight.Bold">Persona</FluentLabel>
                    <FluentLabel>Nombre: @Institucion.NombrePersona</FluentLabel>
                    <FluentLabel>Apellido: @Institucion.ApellidoPersona</FluentLabel>
                </FluentCard>
            </FluentGridItem>
                <FluentGridItem xs="6" sm="3">
                    <FluentCard>
                        <FluentLabel Weight="FontWeight.Bold">Detalles de la empresa</FluentLabel>
                        <FluentLabel>Direccion: @Institucion.Direccion</FluentLabel>
                        <FluentLabel>Empresa: @Institucion.TipoEmpresas</FluentLabel>
                        <FluentLabel>Descripcion: @Institucion.Descripcion</FluentLabel>
                    </FluentCard>
                </FluentGridItem>
                <FluentGridItem xs="6" sm="3">
                    <FluentCard>
                        <FluentLabel Weight="FontWeight.Bold">Patrocinio</FluentLabel>
                        @if (Institucion.PatrocinioActivo && Institucion.Donacion is decimal donacion)
                        {
                            <FluentLabel>Donacion: @donacion.ToString("")</FluentLabel>
                            @if (Institucion.PatrocinioActivo && Institucion.DetallesAyuda is string detalles)
                            {
                                <FluentLabel>Detalles: @detalles</FluentLabel>
                            }
                        }
                    </FluentCard>
                </FluentGridItem>
        </FluentGrid>
        <FluentFooter Style="margin-top: 20px;">
                <FluentButton Style="margin: 5px;" Title="Go Back" OnClick="NavigateBack" >🔙 Volver a la tabla</FluentButton>
            <FluentButton Style="margin:5px;" Title="Edit" OnClick="EditInstitucion">Editar</FluentButton>

        @if (!Deleted)
        {
            @if (!ShowConfirmation)
            {
                        <FluentButton BackgroundColor="Red" Style="margin:5px;"
                                      Type="ButtonType.Button" Appearance="Appearance.Accent" Title="Delete" OnClick="@(() => { ShowConfirmation = true; EditSuccess = false; })">Borrar</FluentButton>
            }
            else
            {
                <DeletePrompt Confirmation="@(async result => await ConfirmAsync(result))" />
            }
        }
        else
        {
            <FluentButton Title="Deleted" Disabled="true">🚫 This item has been deleted.</FluentButton>
        }
        </FluentFooter>
    </FluentCard>
    }
}

@code {
    // Tracking of asynchronous calls.
    private bool Loading;

    // Id from route of contact.
    [Parameter]
    public int InstitucionId { get; set; }

    // Navigation check.
    private int _lastInstitucionId;

    // True with redirect from successful edit.
    [Parameter]
    public bool EditSuccess { get; set; }

    // Contact entity.
    private Institucion? Institucion { get; set; }

    // Set to true when not found.
    private bool NotFound = false;

    // Set to true when delete is requested.
    private bool ShowConfirmation = false;

    // Set to true when delete is successful.
    private bool Deleted = false;

    // Navigated
    protected override async Task OnParametersSetAsync()
    {
        if (_lastInstitucionId != InstitucionId)
        {
            EditSuccess = EditSuccessState.Success;
            EditSuccessState.Success = false;
            _lastInstitucionId = InstitucionId;
            await LoadContactAsync();
        }
        await base.OnParametersSetAsync();
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo($"instituciones/{PageHelper.Page}");
    }

    private void EditInstitucion()
    {
        NavigationManager.NavigateTo($"institucion/edit/{InstitucionId}");
    }

    // Confirm deletion.
    // result is True when user confirmed.
    private async Task ConfirmAsync(bool result)
    {
        if (result)
        {
            await DeleteAsync();
        }
        else
        {
            ShowConfirmation = false;
            EditSuccess = false;
        }
    }

    // Loads the contact.
    private async Task LoadContactAsync()
    {
        if (Loading)
        {
            return; //avoid concurrent requests.
        }

        NotFound = false;
        Institucion = null;

        Loading = true;

        using var context = DbFactory.CreateDbContext();

        if (context.Instituciones is not null)
        {
            Institucion = await context.Instituciones
                .AsNoTracking()
                .SingleOrDefaultAsync(
                    c => c.Id == InstitucionId);

            if (Institucion is null)
            {
                NotFound = true;
            }
        }

        Loading = false;
    }

    // Deletes the contact.
    private async Task DeleteAsync()
    {
        if (Loading)
        {
            // Avoid concurrent requests.
            return;
        }

        Loading = true;
        using var context = DbFactory?.CreateDbContext();

        if (context?.Instituciones is not null)
        {
            var institucion = await context.Instituciones
                .SingleOrDefaultAsync(c => c.Id == InstitucionId);

            if (institucion is not null)
            {
                context.Instituciones?.Remove(institucion);
                await context.SaveChangesAsync();
                Loading = false;
                Deleted = true;
            }
            else
            {
                Loading = false;
                // Show not found.
                await LoadContactAsync();
            }
        }
        else
        {
            Loading = false;
            // Show not found.
            await LoadContactAsync();
        }
    }

    private static class Mensajes
    {
        public const string InstitucionNotFoundTitle = "Institucion no encontrado.";
        public const string InstitucionNotFoundMessage = "La institucion con ese Id no ha sido encontrado en la base de datos.";
        public const string EditMessageTitle = "Institucion Actualizado";
        public const string EditSuccessMessage = "El institucion se ha actualizado exitosamente.";
    }

}